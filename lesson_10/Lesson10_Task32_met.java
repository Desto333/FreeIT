package lesson_10;

/* Задание 32. Имеется текст. Следует составить для него частотный словарь.*/

import java.util.*;

public class Lesson10_Task32_met {
    public static void main(String[] args) {
        String text = "За тридцать лет до этого  разговора  Фредерик  Хэллем  был  заурядным\n" +   // create a text
                "радиохимиком. Его диссертационная работа еще пахла типографской краской, и\n" +
                "ничто в нем не свидетельствовало о таланте, способном потрясти мир.\n" +
                "     А потрясение мира началось, собственно, с того, что на рабочем  столе\n" +
                "Хэллема стояла запыленная колба с ярлычком \"Вольфрам\". Ее поставил сюда не\n" +
                "он. Он даже никогда к ней не прикасался. Она досталась ему в наследство от\n" +
                "прежнего владельца кабинета, которому когда-то бог весть по какой  причине\n" +
                "понадобился вольфрам.  Да  и  содержимое  колбы  уже,  собственно  говоря,\n" +
                "перестало быть вольфрамом. Это были серые  запыленные  крупинки,  покрытые\n" +
                "толстым слоем окиси. Их давно пора было выбросить.\n" +
                "     И вот однажды Хэллем вошел в лабораторию  (ну  да,  это  произошло  3\n" +
                "октября 2070 года) и приступил к работе.  Около  десяти  часов  он  поднял\n" +
                "голову, уставился на колбу и вдруг  схватил  ее.  Пыли  на  ней  не  стало\n" +
                "меньше, выцветший ярлычок нисколько не изменился, но Хэллем тем  не  менее\n" +
                "крикнул:\n" +
                "     - Черт подери! Какой сукин сын трогал эту колбу?\n" +
                "     Так по крайней мере утверждал Денисон, который слышал  этот  вопль  и\n" +
                "много  лет  спустя  поведал   о   нем   Ламонту.   Парадный   рассказ   об\n" +
                "обстоятельствах замечательного открытия, запечатленный во множестве книг и\n" +
                "учебников,  этой  фразы  не  содержит.  Перед  читателем  возникает  образ\n" +
                "проницательного химика, который орлиным взором сразу же подметил изменения\n" +
                "и мгновенно сделал далеко идущие выводы.\n" +
                "     Куда там! Хэллему  вольфрам  был  не  нужен,  он  его  совершенно  не\n" +
                "интересовал. И, в сущности, ему было все равно, трогал  кто-то  колбу  или\n" +
                "нет. Просто он (подобно многим другим людям) терпеть не мог, когда на  его\n" +
                "столе  хозяйничали  без  его  ведома,  и  всегда  готов  был   заподозрить\n" +
                "окружающих в таких посягательствах, продиктованных исключительно  желанием\n" +
                "ему насолить.\n" +
                "     Но в покушении на колбу никто не признавался. Бенджамин Аллан Денисон\n" +
                "услышал возглас Хэллема потому, что сидел  в  кабинете  напротив  лицом  к\n" +
                "открытой двери. Он поднял голову и встретил сверлящий взгляд Хэллема.\n" +
                "     Хэллем не внушал ему  особых  симпатий  (впрочем,  он  никому  их  не\n" +
                "внушал), а в  то  утро  Денисон  плохо  выспался  и  -  как  он  вспоминал\n" +
                "впоследствии - был даже рад сорвать на ком-нибудь свое дурное  настроение.\n" +
                "Хэллем же был для этого идеальным объектом.";

        StringTokenizer st = new StringTokenizer(text, ".,!?:;()\"- \n");                   // create StringTokenizer object and define all delimiters
        List<String> list = new ArrayList<>();                                                      // create new ArrayList to store delimited elements of our text
        Map<String, Integer> freqVocab = new TreeMap<>();                                       // create new TreeMap to store our frequency vocabulary
        while(st.hasMoreTokens()) {                                                             // delimit our text to words using lower case and save them to ArrayList
            list.add(st.nextToken().toLowerCase());
        }

        for (int i = 0; i < list.size(); i++) {                                                 // go through all the words in ArrayList, count repeatings and save the result to our frequency vocabulary
            String element = list.get(i);
            int counter = 0;
            for (int j = 0; j < list.size(); j++) {
                if(element.equals(list.get(j))) {
                    counter++;
                }
            }
            freqVocab.put(element, counter);
        }

        for(Map.Entry<String, Integer> entry : freqVocab.entrySet()) {                          // go through all the words in our vocabulary and print out words and number of repeatings
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

}
